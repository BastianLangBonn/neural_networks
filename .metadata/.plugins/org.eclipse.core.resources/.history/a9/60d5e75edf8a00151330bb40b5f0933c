package model;

import java.util.LinkedList;
import java.util.List;

public class MLP {

    private final List<Neuron> inputLayer = new LinkedList<Neuron>();
    private final List<Neuron> hiddenLayer = new LinkedList<Neuron>();
    private final List<Neuron> outputLayer = new LinkedList<Neuron>();
    private final Neuron bias = new BiasNeuron();

    public MLP(int numberInputNeurons, int numberHiddenNeurons, int numberOutputNeurons, double initialWeight) {

        createInputLayer(numberInputNeurons);
        createFullyConnectedLayer(inputLayer, hiddenLayer, numberHiddenNeurons, initialWeight);
        createFullyConnectedLayer(hiddenLayer, outputLayer, numberOutputNeurons, initialWeight);

    }

    private void createInputLayer(int numberInput) {
        for (int i = 0; i < numberInput; i++) {
            Neuron inputNeuron = new InputNeuron();
            inputLayer.add(inputNeuron);
        }
    }

    private void createFullyConnectedLayer(List<Neuron> originLayer, List<Neuron> targetLayer, int layerSize,
            double initialWeight) {
        for (int i = 0; i < layerSize; i++) {
            Neuron targetNeuron = new StandardNeuron();
            for (Neuron originNeuron : originLayer) {
                Connection connection = new Connection(originNeuron, targetNeuron, initialWeight);
                originNeuron.addOutgoingConnection(connection);
                targetNeuron.addIncomingConnection(connection);
            }
            Connection connection = new Connection(bias, targetNeuron, initialWeight);
            targetNeuron.addIncomingConnection(connection);
            targetLayer.add(targetNeuron);
        }
    }

    public void propagate(List<Double> input) {
        for (int i = 0; i < inputLayer.size(); i++) {
            Neuron neuron = inputLayer.get(i);
            neuron.setLastInducedLocalField(input.get(i));
            neuron.activate();
        }
    }

    @Override
    public String toString() {
        StringBuilder result = new StringBuilder();
        result.append("MLP:\nInput Layer:\n");
        for (Neuron neuron : inputLayer) {
            result.append(neuron.toString() + "\n");
        }
        result.append("\nHidden Layer:\n");
        for (Neuron neuron : hiddenLayer) {
            result.append(neuron.toString() + "\n");
        }
        result.append("\nOutput Layer:\n");
        for (Neuron neuron : outputLayer) {
            result.append(neuron.toString() + "\n");
        }
        return result.toString();
    }
}
