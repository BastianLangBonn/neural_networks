import java.util.ArrayList;
import java.util.List;

public class MLP {

    private final List<Neuron> inputLayer = new ArrayList<Neuron>();
    private final List<Neuron> hiddenLayer = new ArrayList<Neuron>();
    private final List<Neuron> outputLayer = new ArrayList<Neuron>();
    private final Neuron bias = new BiasNeuron();

    public MLP(int numberInput, int numberHidden, int numberOutput, int initialWeight) {
        for (int i = 0; i < numberInput; i++) {
            Neuron inputNeuron = new InputNeuron();
            inputLayer.add(inputNeuron);
        }

        createHiddenLayer(numberHidden, initialWeight);

        for (int i = 0; i < numberOutput; i++) {
            Neuron outputNeuron = new StandardNeuron();
            for (Neuron hiddenNeuron : hiddenLayer) {
                Connection connection = new Connection(outputNeuron, hiddenNeuron, initialWeight);
                hiddenNeuron.addOutgoingConnection(connection);
                outputNeuron.addIncomingConnection(connection);
            }
            new Connection(bias, outputNeuron, initialWeight);
            outputLayer.add(outputNeuron);
        }
    }

    private void createHiddenLayer(int layerSize, int initialWeight) {
        for (int i = 0; i < layerSize; i++) {
            Neuron hiddenNeuron = new StandardNeuron();
            for (Neuron inputNeuron : inputLayer) {
                Connection connection = new Connection(inputNeuron, hiddenNeuron, initialWeight);
                inputNeuron.addOutgoingConnection(connection);
                hiddenNeuron.addIncomingConnection(connection);
            }
            Connection connection = new Connection(bias, hiddenNeuron, initialWeight);
            hiddenNeuron.addIncomingConnection(connection);
            hiddenLayer.add(hiddenNeuron);
        }
    }
}
